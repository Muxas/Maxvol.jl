var documenterSearchIndex = {"docs":
[{"location":"#Documentation-for-Maxvol-1","page":"Documentation for Maxvol","title":"Documentation for Maxvol","text":"","category":"section"},{"location":"#","page":"Documentation for Maxvol","title":"Documentation for Maxvol","text":"This Julia package provides two routines:","category":"page"},{"location":"#","page":"Documentation for Maxvol","title":"Documentation for Maxvol","text":"maxvol_generic!, generic implementation of Maxvol algorithm, which can be used for matrices of any numerical type (e.g. Rational or BigFloat).\nmaxvol!, LAPACK-based implementation of Maxvol algorithm, which works only for standard numerical types: Float32, Float64, ComplexF32 and ComplexF64.","category":"page"},{"location":"#Methods-1","page":"Documentation for Maxvol","title":"Methods","text":"","category":"section"},{"location":"#","page":"Documentation for Maxvol","title":"Documentation for Maxvol","text":"maxvol_generic!\nmaxvol!","category":"page"},{"location":"#Maxvol.maxvol_generic!","page":"Documentation for Maxvol","title":"Maxvol.maxvol_generic!","text":"maxvol_generic!(A, tol=1.05, maxiters=100)\n\nGeneric maxvol, that does not use any BLAS or LAPACK calls.\n\nCan be used for special arithmetics, like BigFloat, Rational or Complex{Float16}.\n\nArguments:\n\nA::Matrix: Input matrix on entry and output coefficients on exit.\ntol::Float64: Stop when determinant growth is less or equal to this.\nmaxiters::Int: Maximum number of iterations.\n\nReturns:\n\npiv::Vector{Int}: Indexes of pivoted rows\nniters::Int: Number of performed swap iterations\n\nExample:\n\njulia> using Random, LinearAlgebra, Maxvol\njulia> rng = MersenneTwister(100);\njulia> A = rand(rng, BigFloat, 1000, 100);\njulia> C = copy(A);\njulia> piv, niters = maxvol_generic!(C);\njulia> norm(A-C*A[piv,:]) / norm(A)\n2.030657951400512330834848952202721164346464876711701213634530270353170311161736e-76\njulia> A = rand(rng, ComplexF64, 1000, 100);\njulia> C = copy(A);\njulia> piv, niters = maxvol_generic!(C);\njulia> norm(A-C*A[piv,:]) / norm(A)\n4.863490630095799e-15\n\nSee also: maxvol!\n\n\n\n\n\n","category":"function"},{"location":"#Maxvol.maxvol!","page":"Documentation for Maxvol","title":"Maxvol.maxvol!","text":"maxvol!(A, tol=1.05, maxiters=100)\n\nUses vendor-optimized LAPACK, provided by Julia.\n\nSupports only 4 input types: Float32 (single), Float64 (double), ComplexF32 (single complex) and ComplexF64 (double complex).\n\nArguments:\n\nA::Matrix{T}: Input matrix on entry and output coefficients on exit. T   must be one of Float32, Float64, ComplexF32 and ComplexF64.\ntol::Float64: Stop when determinant growth is less or equal to this.\nmaxiters::Int: Maximum number of iterations.\n\nReturns:\n\npiv::Vector{Int}: Indexes of pivoted rows\nniters::Int: Number of performed swap iterations\n\nExample:\n\njulia> using Random, LinearAlgebra, Maxvol\njulia> rng = MersenneTwister(100);\njulia> A = rand(rng, Float64, 1000, 100);\njulia> C = copy(A);\njulia> piv, niters = maxvol!(C);\njulia> norm(A-C*A[piv,:]) / norm(A)\n2.3975097489579994e-15\njulia> A = rand(rng, ComplexF32, 1000, 100);\njulia> C = copy(A);\njulia> piv, niters = maxvol!(C);\njulia> norm(A-C*A[piv,:]) / norm(A)\n2.0852597f-6\n\nSee also: maxvol_generic!\n\n\n\n\n\n","category":"function"},{"location":"#License-1","page":"Documentation for Maxvol","title":"License","text":"","category":"section"},{"location":"#","page":"Documentation for Maxvol","title":"Documentation for Maxvol","text":"This package is ditributed under BSD 3-Clause license. It can be found in the root directory of repository in LICENSE.md file.","category":"page"}]
}
